<?php

use Drupal\Core\Queue\QueueInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\signalwire\Util\SignalwireUtil;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implements hook_help().
 */
function signalwire_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
        // Main module help for the signalwire module.
        case 'help.page.signalwire':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('Integrates Drupal 8 to Signalwire.') . '</p>';
            return $output;

        default:
    }
}

/**
 * Implements hook_form_FORM_ID_alter.
 */
function signalwire_form_node_signalwire_message_edit_form_alter(&$form, FormStateInterface $form_state, $form_id){
    $form['#validate'][] = 'signalwire_form_node_signalwire_message_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter.
 */
function signalwire_form_node_signalwire_message_form_alter(&$form, FormStateInterface $form_state, $form_id){
    $form['#validate'][] = 'signalwire_form_node_signalwire_message_form_validate';
}

/**
 * Validates submission values in the node_signalwire_message_form form.
 */
function signalwire_form_node_signalwire_message_form_validate(&$form, FormStateInterface $form_state){
    /** @var Drupal\Core\Datetime\DrupalDateTime $field_send_date */
    $field_send_date = $form_state->getValue('field_send_date')[0]['value'];
    $field_send_date = new DrupalDateTime('@'.$field_send_date->getTimestamp());
    $field_send_date->setTime(0,0,0);

    /** @var Drupal\Core\Datetime\DrupalDateTime $field_stop_date */
    $field_stop_date = $form_state->getValue('field_stop_date')[0]['value'];
    $field_stop_date = new DrupalDateTime('@'.$field_stop_date->getTimestamp());
    $field_stop_date->setTime(0,0,0);

    if ($field_send_date->getTimestamp() > $field_stop_date->getTimestamp()){
        $form_state->setErrorByName('field_send_date', t('The start date cannot be greater than the stop date.'));
    }

    $now = new DrupalDateTime('now', DateTimeItemInterface::STORAGE_TIMEZONE);
    $now->setTime(0, 0, 0);

    if ($field_send_date->getTimestamp() < $now->getTimestamp()){
        $form_state->setErrorByName('field_send_date', t('The start date cannot be less than the current date.'));
    }

    if ($field_stop_date->getTimestamp() < $now->getTimestamp()){
        $form_state->setErrorByName('field_stop_date', t('The stop date cannot be less than the current date.'));
    }
}
/**
 * Implements hook_entity_presave.
 */
function signalwire_node_presave(EntityInterface $entity){

    if ($entity->bundle() == 'signalwire_message'){
        $field_send_date = new DrupalDateTime('@'.$entity->field_send_date->value);
        $field_send_date->setTime(0,0,0);
        $entity->field_send_date = $field_send_date->getTimestamp();

        $field_stop_date = new DrupalDateTime('@'.$entity->field_stop_date->value);
        $field_stop_date->setTime(0,0,0);
        $entity->field_stop_date = $field_stop_date->getTimestamp();

        if ($entity->field_message_frequency->value == 0 && $entity->field_send_date != $entity->field_stop_date){
            $entity->field_stop_date = $entity->field_send_date;
        }
    }
}

/**
 * Implements hook_cron().
 */
function signalwire_cron(){
    /** @var  \Drupal\Core\Config\ConfigFactoryInterface $config */
    $config = Drupal::service('config.factory');
    $signalwire_config = $config->get('signalwire.config');
    $gateway = $signalwire_config->get('client');

    if ($gateway != 'none'){
        /** @var QueueInterface $queue */
        $queue = \Drupal::service('queue')->get('signalwire_message_queue');
        $number_of_Items = $queue->numberOfItems();

        //don't add anything to the queue if not empty.
        if ($number_of_Items == 0){
            $now = new DrupalDateTime('now', DateTimeItemInterface::STORAGE_TIMEZONE);
            $now->setTime(0, 0, 0);

            $signalwireManagerService = Drupal::service('signalwire_messaging.manager');
            $messages = $signalwireManagerService->getMessagesBySendDate($now->getTimestamp());

            $queue = \Drupal::queue('signalwire_message_queue');
            $queue->createQueue();

            $data = array();
            foreach ($messages as $message){
                $data['node'] = $message->nid;
                $data['message'] = $message->field_signalwire_message_value;
                $data['frequency'] = $message->field_message_frequency_value;
                $data['field_stop_date'] = $message->field_stop_date_value;
                $data['field_send_date'] = $message->field_send_date_value;
                $data['to'] = $message->field_recipients_value;
                $queue->createItem($data);
            }
        }
    }
}
