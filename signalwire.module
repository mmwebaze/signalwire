<?php
use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\signalwire\Util\SignalwireUtil;

/**
 * Implements hook_help().
 */
function signalwire_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
        // Main module help for the signalwire module.
        case 'help.page.signalwire':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('Integrates Drupal 8 to Signalwire.') . '</p>';
            return $output;

        default:
    }
}

/**
 * Implements hook_form_alter().
 *
 * Adding signalwire messaging settings to managed fields form of a fieldable entity.
 */
function signalwire_form_alter(&$form, FormStateInterface $form_state, $form_id) {

    /** @var  \Drupal\Core\Config\ConfigFactoryInterface $config */
    $config = Drupal::service('config.factory');
    $signalwire_config = $config->get('signalwire.config');
    $signalwire_nodes = $signalwire_config->get('messaging.entities.node');
    if (!is_null($signalwire_nodes)){
        $signalwire_nodes = array_keys($signalwire_config->get('messaging.entities.node'));
    }
    else{
        $signalwire_nodes = array();
    }

    $messaging_forms = array();

    foreach ($signalwire_nodes as $signalwire_node){
        array_push($messaging_forms, 'node_'.$signalwire_node.'_form');
    }

    if ($form_id == 'entity_view_display_edit_form'){

        $signalwire_nodes = $signalwire_config->get('messaging.entities');

        /** @var \Drupal\field_ui\Form\EntityViewDisplayEditForm $form_object */
        $form_object = $form_state->getFormObject();

        /** @var  \Drupal\Core\Entity\Entity\EntityViewDisplay $entity */
        $entity = $form_object->getEntity();

        $target_type = $entity->getTargetEntityTypeId();

        $target_bundle = $entity->getTargetBundle();

        $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($target_type, $target_bundle);
        $fields = $form['#fields'];

        $form['enabled_messaging_fields'] = array(
            '#type' => 'details',
            '#open' => FALSE,
            '#title' => t('Messaging settings'),
            '#description' => t('Selected fields will make up the text message body.'),
            '#tree' => TRUE,
        );

        foreach ($fields as $field){
            //print_r($field_definitions[$field]->getType().' - '.$field);
            $form['enabled_messaging_fields'][$target_type.'#'.$target_bundle.'#'.$field] = array(
                '#type' => 'checkbox',
                '#title' => $field_definitions[$field]->getLabel(),
                '#default_value' => $signalwire_nodes[$target_type][$target_bundle][$field],
            );
        }

        $form['actions']['submit']['#submit'][] = 'Drupal\signalwire\Service\SignalwireHandler::signalwireManagedFields';
    }
    else if(in_array($form_id, $messaging_forms)) {
        $form['recipient_details'] = array(
            '#type' => 'details',
            '#open' => TRUE,
            '#title' => t('Recipient details'),
            //'#description' => t('Set.'),
            '#tree' => TRUE,
        );

        $form['recipient_details']['message_on_node_creation'] = array(
            '#type' => 'checkbox',
            '#title' => t('This node is configured to support text messaging'),
            '#weight' => -1,
            '#default_value' => '1',
        );
        $form['recipient_details']['recipients'] = array(
            '#title' => t('Recipient(s)'),
            '#type' => 'textarea',
            '#description' => t('List of recipients telephone numbers or number groups separated by comma.'),
            '#resizable' => TRUE,
            '#weight' => -1,
            '#required' => TRUE,
        );
        $form['recipient_details']['recipient_type'] = array(
            '#type' => 'radios',
            '#title' => t('Recipient types'),
            '#options' => array(
                'telephone_numbers' => t('Telephone number(s)'),
                'number_groups' => t('Number Group(s)'),
            ),
            '#weight' => -1,
            '#default_value' => 'telephone_numbers',
            '#required' => TRUE,
        );
        $form['recipient_details']['message_frequency'] = array(
            '#type' => 'radios',
            '#title' => t('Message Frequency'),
            '#options' => array(
                'once' => t('Once on content create'),
                'daily' => t('Daily'),
                'weekly' => t('Weekly'),
                'monthly' => t('Monthly'),
            ),
            '#weight' => -1,
            '#default_value' => 'once',
            '#required' => TRUE,
        );

        $form['#entity_builders'][] = 'signalwire_node_builder';
    }
}

/**
 * Entity form builder to add the message_on_node_creation information to the node.
 *
 * @todo: Remove this in favor of an entity field.
 */
function signalwire_node_builder($entity_type, \Drupal\node\NodeInterface $entity, &$form, FormStateInterface $form_state) {
    /*$entity->message_on_node_creation = $form_state->getValue('message_on_node_creation');*/
    $entity->recipient_details = $form_state->getValue('recipient_details');
}

/**
 * Implements hook_entity_insert().
 */
function signalwire_entity_insert(EntityInterface $entity) {

    $config = Drupal::service('config.factory');
    $signalwire_config = $config->get('signalwire.config');
    $gateway = $signalwire_config->get('client');

    if ($gateway != 'none'){

        $bundles = array_keys($signalwire_config->get('messaging.entities.node'));

        if (in_array($entity->bundle(), $bundles)){
            $fields = array_keys($signalwire_config->get('messaging.entities.node.'.$entity->bundle()));

            $message = null;

            //Create the message based on configured fields
            foreach ($fields as $field){
                $items = $entity->get($field)->getValue();

                foreach ($items as $item){
                    foreach ($item as $key => $value){
                        switch ($key){
                            case 'value':
                                $value = trim(strip_tags($value));
                                $message = $message.$value.'. ';
                                break;
                            case 'target_id':
                                /** @todo implement entity reference values. **/
                                break;
                        }
                    }
                }
            }

            //send message out once on entity creation.
            $frequency = 0;

            switch ($entity->recipient_details['message_frequency']){
                case 'daily':
                    $frequency = 1;
                    break;
                case 'weekly':
                    $frequency = 2;
                    break;
                case 'monthly':
                    $frequency = 3;
                    break;
            }

            $value = array(
                'node' => $entity->id(),
                'message' => $message,
                'from' => $signalwire_config->get('sender'),
                'recipients' => serialize(array(
                    'type' => $entity->recipient_details['recipient_type'],
                    'numbers' => explode(',', $entity->recipient_details['recipients'])
                )),
                'frequency' => $frequency,
                'date_sent' => $entity->get('created')->value,
                'date_next_send' => SignalwireUtil::nextSendTimeStamp($entity->get('created')->value, $entity->recipient_details['message_frequency'])
            );
            $signalwire_messaging_manager = Drupal::service('signalwire_messaging.manager');
            $signalwire_plugin_manager = Drupal::service('plugin.manager.signalwire_manager');
            $instance = $signalwire_plugin_manager->createInstance($gateway);

            if ($entity->recipient_details['recipient_type'] == 'telephone_numbers'){
                $queue = \Drupal::queue('signalwire_message_queue');
                $queue->createQueue();

                $numbers = explode(',', $entity->recipient_details['recipients']);
                foreach ($numbers as $number){
                    //queue
                    //$testMsg = $instance->sendMessage($message, $signalwire_config->get('sender'), $number);
                    $data = array(
                        'message' => $message,
                        'from' => $signalwire_config->get('sender'),
                        'to' => $number
                    );

                    $queue->createItem($data);
                }
            }
            elseif ($entity->recipient_details['recipient_type'] == 'number_groups'){
                //get numbers belonging to number group
            }
            //do not save message if frequency is equal to zero or set to once.
            if ($frequency != 0){
                $signalwire_messaging_manager->saveMessage($value);
            }
        }
    }
}
function processRecipients($recipients) {

}